services:
  # Main API service
  api:
    image: dev.local/veraid-authority
    build:
      context: .
    command: api
    ports:
      - "8080:8080"
    environment:
      AUTHORITY_VERSION: "1.0.0dev1"
      AUTHORITY_SUPERADMIN: admin@veraid.example
      MONGODB_URI: mongodb://root:password123@mongodb:27017/endpoint?minPoolSize=1&maxPoolSize=3&connectTimeoutMS=30000
      MONGODB_USER: root
      MONGODB_DB: endpoint
      MONGODB_PASSWORD: password123
      OAUTH2_JWKS_URL: http://mock-authz-server:8080/default/jwks
      OAUTH2_TOKEN_AUDIENCE: default
      OAUTH2_TOKEN_ISSUER_REGEX: "^http://[^/]+/default$$"
      KMS_ADAPTER: AWS
      AWS_ACCESS_KEY_ID: access_key_id
      AWS_SECRET_ACCESS_KEY: secret_access_key
      AWS_KMS_ENDPOINT: http://mock-aws-kms:8080
      AWS_KMS_REGION: eu-west-2
    depends_on:
      mongodb:
        condition: service_healthy
      mock-authz-server:
        condition: service_healthy
      mock-aws-kms:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Awala service
  awala:
    image: dev.local/veraid-authority
    build:
      context: .
    command: awala
    ports:
      - "8083:8080"
    environment:
      AUTHORITY_VERSION: "1.0.0dev1"
      MONGODB_URI: mongodb://root:password123@mongodb:27017/endpoint?minPoolSize=1&maxPoolSize=3&connectTimeoutMS=30000
      MONGODB_USER: root
      MONGODB_DB: endpoint
      MONGODB_PASSWORD: password123
      KMS_ADAPTER: AWS
      AWS_ACCESS_KEY_ID: access_key_id
      AWS_SECRET_ACCESS_KEY: secret_access_key
      AWS_KMS_ENDPOINT: http://mock-aws-kms:8080
      AWS_KMS_REGION: eu-west-2
      CE_CHANNEL_AWALA_OUTGOING_MESSAGES: http://mock-awala-middleware:8080
      CE_CHANNEL_BACKGROUND_QUEUE: http://queue:8080
    depends_on:
      mongodb:
        condition: service_healthy
      mock-aws-kms:
        condition: service_healthy
      mock-awala-middleware:
        condition: service_healthy
      queue:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Queue service
  queue:
    image: dev.local/veraid-authority
    build:
      context: .
    command: queue
    ports:
      - "8084:8080"
    environment:
      AUTHORITY_VERSION: "1.0.0dev1"
      MONGODB_URI: mongodb://root:password123@mongodb:27017/endpoint?minPoolSize=1&maxPoolSize=3&connectTimeoutMS=30000
      MONGODB_USER: root
      MONGODB_DB: endpoint
      MONGODB_PASSWORD: password123
      KMS_ADAPTER: AWS
      AWS_ACCESS_KEY_ID: access_key_id
      AWS_SECRET_ACCESS_KEY: secret_access_key
      AWS_KMS_ENDPOINT: http://mock-aws-kms:8080
      AWS_KMS_REGION: eu-west-2
      CE_CHANNEL_AWALA_OUTGOING_MESSAGES: http://mock-awala-middleware:8080
      CE_CHANNEL_BACKGROUND_QUEUE: http://queue:8080
    depends_on:
      mongodb:
        condition: service_healthy
      mock-aws-kms:
        condition: service_healthy
      mock-awala-middleware:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Mock authorization server
  mock-authz-server:
    image: ghcr.io/navikt/mock-oauth2-server:0.5.8
    ports:
      - "8081:8080"
    environment:
      JSON_CONFIG: |
        {
          "tokenCallbacks": [
            {
              "issuerId": "default",
              "tokenExpiry": 120,
              "requestMappings": [
                {
                  "requestParam": "scope",
                  "match": "super-admin",
                  "claims": {"email": "admin@veraid.example"}
                },
                {
                  "requestParam": "scope",
                  "match": "user",
                  "claims": {"email": "member@example.com"}
                }
              ]
            }
          ]
        }
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/default/.well-known/openid-configuration"]
      interval: 5s
      retries: 3

  # Mock Awala middleware
  mock-awala-middleware:
    image: mockserver/mockserver:5.15.0
    ports:
      - "8082:8080"
    environment:
      MOCKSERVER_SERVER_PORT: "8080"
      MOCKSERVER_LIVENESS_HTTP_GET_PATH: /mockserver/status
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/mockserver/status"]
      interval: 10s
      timeout: 3s
      retries: 12
      start_period: 10s

  # Mock AWS KMS
  mock-aws-kms:
    image: nsmithuk/local-kms:3.11.4
    ports:
      - "8085:8080"
    volumes:
      - ./kms-seed.yaml:/init/seed.yaml
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 5s
      retries: 3

  # MongoDB
  mongodb:
    image: mongo:6.0.4
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password123
    volumes:
      - mongodb-data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

volumes:
  mongodb-data: 